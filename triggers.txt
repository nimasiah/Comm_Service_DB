-- Triggers
-- Donated items cannot only be of one type (clothes, food, money)
CREATE TRIGGER donation_single_type_clothes BEFORE INSERT ON Clothes
    FOR EACH ROW
    BEGIN
        IF NEW.donation_id in (SELECT donation_id FROM Foods)
               OR NEW.donation_id in (SELECT donation_id FROM monetarydonations) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Donation item can only be of one type (clothes, food or money).';
        end if;
    end;

-- Donated items cannot only be of one type (clothes, food, money)
CREATE TRIGGER donation_single_type_food BEFORE INSERT ON Foods
    FOR EACH ROW
    BEGIN
        IF NEW.donation_id in (SELECT donation_id FROM Clothes)
               OR NEW.donation_id in (SELECT donation_id FROM monetarydonations) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Donation item can only be of one type (clothes, food or money).';
        end if;
    end;

-- Donated items cannot only be of one type (clothes, food, money)
CREATE TRIGGER donation_single_type_money BEFORE INSERT ON monetarydonations
    FOR EACH ROW
    BEGIN
        IF NEW.donation_id in (SELECT donation_id FROM Foods)
               OR NEW.donation_id in (SELECT donation_id FROM Clothes) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Donation item can only be of one type (clothes, food or money).';
        end if;
    end;

-- Limit monetary distributions to be below the amount given in the monetary donation
CREATE TRIGGER distribution_under_total BEFORE INSERT ON moneydistributions
    FOR EACH ROW
    BEGIN
        DECLARE distributed_already DOUBLE;
        DECLARE total_funds DOUBLE;

        SET distributed_already = (SELECT SUM(value_distributed) FROM (SELECT value_distributed
                                                                FROM moneydistributions
                                                                WHERE donation_id = NEW.donation_id) t);
        SET total_funds = (SELECT value FROM MonetaryDonations WHERE donation_id = NEW.donation_id);

        IF total_funds < (distributed_already + NEW.value_distributed) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Money distribution is in excess of the total funds available from this donation.';
        END IF;
    END;

-- Monetary limit on donation centers.
CREATE TRIGGER monetary_donations_limit BEFORE INSERT ON moneydistributions
    FOR EACH ROW
    BEGIN
        DECLARE avg_donation DOUBLE;
        DECLARE this_donationcenter_total DOUBLE;

        SET avg_donation = (SELECT AVG(tots) as avg_sum FROM (SELECT SUM(value_distributed) as tots, recipient_id FROM moneydistributions
                            GROUP BY recipient_id) t );
        SET this_donationcenter_total = (SELECT SUM(value_distributed) FROM moneydistributions
                                         WHERE recipient_id = NEW.recipient_id);

        IF (avg_donation is not null) and (this_donationcenter_total + NEW.value_distributed)  > (avg_donation * 1.2) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Donation total for destination must be less than 120% of the average.';
        END IF;
    end;


-- Destination is not also a donation center
CREATE TRIGGER destination_unique BEFORE INSERT ON Destinations
    FOR EACH ROW
    BEGIN
    IF (NEW.recipient, NEW.street, NEW.zip_code) IN (SELECT name, street, zip_code FROM donationcenters) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Destination cannot double as donation center.';
    END IF;
    END;

-- Donation center cannot be a destination.
CREATE TRIGGER donation_center_unique BEFORE INSERT ON donationcenters
    FOR EACH ROW
    BEGIN
    IF (NEW.name, NEW.street, NEW.zip_code) IN (SELECT recipient, street, zip_code FROM Destinations) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Donation center cannot double as destination.';
    END IF;
    END;

-- Maintains rule that for every 5 volunteers there is a minimum of 1 employee at a donation center.
CREATE TRIGGER minimum_employee_check BEFORE INSERT ON volunteers
    FOR EACH ROW
    BEGIN
        DECLARE volunteer_count INT;
        DECLARE employee_count INT;

       SET volunteer_count = (SELECT COUNT(*)
                                FROM WORKERS
                                INNER JOIN Volunteers V on Workers.worker_id = V.worker_id
                                WHERE Workers.center_id = (SELECT center_id from workers where workers.worker_id = NEW.worker_id));
       SET employee_count = (SELECT COUNT(*)
                                FROM WORKERS
                                INNER JOIN Employees E on Workers.worker_id = E.worker_id
                                WHERE Workers.center_id = (SELECT center_id from workers where workers.worker_id = NEW.worker_id));
       IF ( volunteer_count + 1 )> (employee_count * 5) THEN
           SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Must have a minimum of one employee for every 5 volunteers.';
       end if;
    END;